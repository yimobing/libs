function _regeneratorRuntime(){"use strict";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function _regeneratorRuntime(){return exports;};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value;},$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key];}try{define({},"");}catch(err){define=function define(obj,key,value){return obj[key]=value;};}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,"_invoke",{value:makeInvokeMethod(innerFn,self,context)}),generator;}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)};}catch(err){return{type:"throw",arg:err};}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,function(){return this;});var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach(function(method){define(prototype,method,function(arg){return this._invoke(method,arg);});});}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==_typeof(value)&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then(function(value){invoke("next",value,resolve,reject);},function(err){invoke("throw",err,resolve,reject);}):PromiseImpl.resolve(value).then(function(unwrapped){result.value=unwrapped,resolve(result);},function(error){return invoke("throw",error,resolve,reject);});}reject(record.arg);}var previousPromise;defineProperty(this,"_invoke",{value:function value(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl(function(resolve,reject){invoke(method,arg,resolve,reject);});}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg();}});}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return{value:void 0,done:!0};}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult;}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg);}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done};}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg);}};}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(undefined===method)return context.delegate=null,"throw"===methodName&&delegate.iterator["return"]&&(context.method="return",context.arg=undefined,maybeInvokeDelegate(delegate,context),"throw"===context.method)||"return"!==methodName&&(context.method="throw",context.arg=new TypeError("The iterator does not provide a '"+methodName+"' method")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=undefined),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel);}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry);}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record;}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0);}function values(iterable){if(iterable||""===iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=undefined,next.done=!0,next;};return next.next=next;}}throw new TypeError(_typeof(iterable)+" is not iterable");}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name));},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun;},exports.awrap=function(arg){return{__await:arg};},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,function(){return this;}),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then(function(result){return result.done?result.value:iter.next();});},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,function(){return this;}),define(Gp,"toString",function(){return"[object Generator]";}),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next;}return next.done=!0,next;};},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=undefined,this.done=!1,this.delegate=null,this.method="next",this.arg=undefined,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=undefined);},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval;},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=undefined),!!caught;}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break;}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record);},complete:function complete(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel;},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel;}},"catch":function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry);}return thrown;}}throw new Error("illegal catch attempt");},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=undefined),ContinueSentinel;}},exports;}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest();}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2;}function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_x,_r,_arr=[],_n=!0,_d=!1;try{if(_x=(_i=_i.call(arr)).next,0===i){if(Object(_i)!==_i)return;_n=!1;}else for(;!(_n=(_s=_x.call(_i)).done)&&(_arr.push(_s.value),_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err;}finally{try{if(!_n&&null!=_i["return"]&&(_r=_i["return"](),Object(_r)!==_r))return;}finally{if(_d)throw _e;}}return _arr;}}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,_toPropertyKey(descriptor.key),descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);Object.defineProperty(Constructor,"prototype",{writable:false});return Constructor;}function _defineProperty(obj,key,value){key=_toPropertyKey(key);if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return _typeof(key)==="symbol"?key:String(key);}function _toPrimitive(input,hint){if(_typeof(input)!=="object"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||"default");if(_typeof(res)!=="object")return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return(hint==="string"?String:Number)(input);}function _typeof(obj){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj;}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;},_typeof(obj);}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(undefined);});};}function I(I){return"string"==typeof I?I:I instanceof Blob?URL.createObjectURL(I):I instanceof ArrayBuffer?URL.createObjectURL(new Blob([I])):I instanceof Response?URL.createObjectURL(I.blob()):I;}function g(_x,_x2){return _g2.apply(this,arguments);}function _g2(){_g2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(I,g){return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:g&&(g instanceof ArrayBuffer&&(g=new Blob([g])),function(I,g){var C=document.createElement("a");C.download=I,C.style.display="none",C.href=g,document.body.appendChild(C),C.click(),document.body.removeChild(C);}(I,URL.createObjectURL(g)));case 1:case"end":return _context.stop();}},_callee);}));return _g2.apply(this,arguments);}var C="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function Z(I){return I&&I.__esModule&&Object.prototype.hasOwnProperty.call(I,"default")?I["default"]:I;}var l=function l(I,g){for(var C=-1,Z=null==I?0:I.length,l=Array(Z);++C<Z;)l[C]=g(I[C],C,I);return l;};var b=function b(){this.__data__=[],this.size=0;};var c=function c(I,g){return I===g||I!=I&&g!=g;},G=c;var X=function X(I,g){for(var C=I.length;C--;)if(G(I[C][0],g))return C;return-1;},A=X,d=Array.prototype.splice;var m=function m(I){var g=this.__data__,C=A(g,I);return!(C<0)&&(C==g.length-1?g.pop():d.call(g,C,1),--this.size,!0);},W=X;var V=function V(I){var g=this.__data__,C=W(g,I);return C<0?void 0:g[C][1];},y=X;var Y=X;var u=function u(I,g){var C=this.__data__,Z=Y(C,I);return Z<0?(++this.size,C.push([I,g])):C[Z][1]=g,this;},i=b,L=m,N=V,h=function h(I){return y(this.__data__,I)>-1;},R=u;function x(I){var g=-1,C=null==I?0:I.length;for(this.clear();++g<C;){var Z=I[g];this.set(Z[0],Z[1]);}}x.prototype.clear=i,x.prototype["delete"]=L,x.prototype.get=N,x.prototype.has=h,x.prototype.set=R;var s=x,p=s;var S=function S(){this.__data__=new p(),this.size=0;};var M=function M(I){var g=this.__data__,C=g["delete"](I);return this.size=g.size,C;};var J=function J(I){return this.__data__.get(I);};var F=function F(I){return this.__data__.has(I);},a="object"==_typeof(C)&&C&&C.Object===Object&&C,z=a,B="object"==(typeof self==="undefined"?"undefined":_typeof(self))&&self&&self.Object===Object&&self,T=z||B||Function("return this")(),H=T.Symbol,k=H,w=Object.prototype,U=w.hasOwnProperty,n=w.toString,K=k?k.toStringTag:void 0;var o=function o(I){var g=U.call(I,K),C=I[K];try{I[K]=void 0;var Z=!0;}catch(I){}var l=n.call(I);return Z&&(g?I[K]=C:delete I[K]),l;},j=Object.prototype.toString;var D=o,v=function v(I){return j.call(I);},t=H?H.toStringTag:void 0;var Q=function Q(I){return null==I?void 0===I?"[object Undefined]":"[object Null]":t&&t in Object(I)?D(I):v(I);};var O=function O(I){var g=_typeof(I);return null!=I&&("object"==g||"function"==g);},E=Q,P=O;var f,e=function e(I){if(!P(I))return!1;var g=E(I);return"[object Function]"==g||"[object GeneratorFunction]"==g||"[object AsyncFunction]"==g||"[object Proxy]"==g;},r=T["__core-js_shared__"],q=(f=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||""))?"Symbol(src)_1."+f:"";var _=function _(I){return!!q&&q in I;},$=Function.prototype.toString;var II=function II(I){if(null!=I){try{return $.call(I);}catch(I){}try{return I+"";}catch(I){}}return"";},gI=e,CI=_,ZI=O,lI=II,bI=/^\[object .+?Constructor\]$/,cI=Function.prototype,GI=Object.prototype,XI=cI.toString,AI=GI.hasOwnProperty,dI=RegExp("^"+XI.call(AI).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");var mI=function mI(I){return!(!ZI(I)||CI(I))&&(gI(I)?dI:bI).test(lI(I));},WI=function WI(I,g){return null==I?void 0:I[g];};var VI=function VI(I,g){var C=WI(I,g);return mI(C)?C:void 0;},yI=VI(T,"Map"),YI=VI(Object,"create"),uI=YI;var iI=function iI(){this.__data__=uI?uI(null):{},this.size=0;};var LI=function LI(I){var g=this.has(I)&&delete this.__data__[I];return this.size-=g?1:0,g;},NI=YI,hI=Object.prototype.hasOwnProperty;var RI=function RI(I){var g=this.__data__;if(NI){var C=g[I];return"__lodash_hash_undefined__"===C?void 0:C;}return hI.call(g,I)?g[I]:void 0;},xI=YI,sI=Object.prototype.hasOwnProperty;var pI=YI;var SI=iI,MI=LI,JI=RI,FI=function FI(I){var g=this.__data__;return xI?void 0!==g[I]:sI.call(g,I);},aI=function aI(I,g){var C=this.__data__;return this.size+=this.has(I)?0:1,C[I]=pI&&void 0===g?"__lodash_hash_undefined__":g,this;};function zI(I){var g=-1,C=null==I?0:I.length;for(this.clear();++g<C;){var Z=I[g];this.set(Z[0],Z[1]);}}zI.prototype.clear=SI,zI.prototype["delete"]=MI,zI.prototype.get=JI,zI.prototype.has=FI,zI.prototype.set=aI;var BI=zI,TI=s,HI=yI;var kI=function kI(I){var g=_typeof(I);return"string"==g||"number"==g||"symbol"==g||"boolean"==g?"__proto__"!==I:null===I;};var wI=function wI(I,g){var C=I.__data__;return kI(g)?C["string"==typeof g?"string":"hash"]:C.map;},UI=wI;var nI=wI;var KI=wI;var oI=wI;var jI=function jI(){this.size=0,this.__data__={hash:new BI(),map:new(HI||TI)(),string:new BI()};},DI=function DI(I){var g=UI(this,I)["delete"](I);return this.size-=g?1:0,g;},vI=function vI(I){return nI(this,I).get(I);},tI=function tI(I){return KI(this,I).has(I);},QI=function QI(I,g){var C=oI(this,I),Z=C.size;return C.set(I,g),this.size+=C.size==Z?0:1,this;};function OI(I){var g=-1,C=null==I?0:I.length;for(this.clear();++g<C;){var Z=I[g];this.set(Z[0],Z[1]);}}OI.prototype.clear=jI,OI.prototype["delete"]=DI,OI.prototype.get=vI,OI.prototype.has=tI,OI.prototype.set=QI;var EI=OI,PI=s,fI=yI,eI=EI;var rI=s,qI=S,_I=M,$I=J,Ig=F,gg=function gg(I,g){var C=this.__data__;if(C instanceof PI){var Z=C.__data__;if(!fI||Z.length<199)return Z.push([I,g]),this.size=++C.size,this;C=this.__data__=new eI(Z);}return C.set(I,g),this.size=C.size,this;};function Cg(I){var g=this.__data__=new rI(I);this.size=g.size;}Cg.prototype.clear=qI,Cg.prototype["delete"]=_I,Cg.prototype.get=$I,Cg.prototype.has=Ig,Cg.prototype.set=gg;var Zg=Cg;var lg=function lg(I,g){for(var C=-1,Z=null==I?0:I.length;++C<Z&&!1!==g(I[C],C,I););return I;},bg=VI,cg=function(){try{var I=bg(Object,"defineProperty");return I({},"",{}),I;}catch(I){}}(),Gg=cg;var Xg=function Xg(I,g,C){"__proto__"==g&&Gg?Gg(I,g,{configurable:!0,enumerable:!0,value:C,writable:!0}):I[g]=C;},Ag=Xg,dg=c,mg=Object.prototype.hasOwnProperty;var Wg=function Wg(I,g,C){var Z=I[g];mg.call(I,g)&&dg(Z,C)&&(void 0!==C||g in I)||Ag(I,g,C);},Vg=Wg,yg=Xg;var Yg=function Yg(I,g,C,Z){var l=!C;C||(C={});for(var b=-1,c=g.length;++b<c;){var G=g[b],X=Z?Z(C[G],I[G],G,C,I):void 0;void 0===X&&(X=I[G]),l?yg(C,G,X):Vg(C,G,X);}return C;};var ug=function ug(I,g){for(var C=-1,Z=Array(I);++C<I;)Z[C]=g(C);return Z;};var ig=function ig(I){return null!=I&&"object"==_typeof(I);},Lg=Q,Ng=ig;var hg=function hg(I){return Ng(I)&&"[object Arguments]"==Lg(I);},Rg=ig,xg=Object.prototype,sg=xg.hasOwnProperty,pg=xg.propertyIsEnumerable,Sg=hg(function(){return arguments;}())?hg:function(I){return Rg(I)&&sg.call(I,"callee")&&!pg.call(I,"callee");},Mg=Array.isArray,Jg={exports:{}};var Fg=function Fg(){return!1;};!function(I,g){var C=T,Z=Fg,l=g&&!g.nodeType&&g,b=l&&I&&!I.nodeType&&I,c=b&&b.exports===l?C.Buffer:void 0,G=(c?c.isBuffer:void 0)||Z;I.exports=G;}(Jg,Jg.exports);var ag=Jg.exports,zg=/^(?:0|[1-9]\d*)$/;var Bg=function Bg(I,g){var C=_typeof(I);return!!(g=null==g?9007199254740991:g)&&("number"==C||"symbol"!=C&&zg.test(I))&&I>-1&&I%1==0&&I<g;};var Tg=function Tg(I){return"number"==typeof I&&I>-1&&I%1==0&&I<=9007199254740991;},Hg=Q,kg=Tg,wg=ig,Ug={};Ug["[object Float32Array]"]=Ug["[object Float64Array]"]=Ug["[object Int8Array]"]=Ug["[object Int16Array]"]=Ug["[object Int32Array]"]=Ug["[object Uint8Array]"]=Ug["[object Uint8ClampedArray]"]=Ug["[object Uint16Array]"]=Ug["[object Uint32Array]"]=!0,Ug["[object Arguments]"]=Ug["[object Array]"]=Ug["[object ArrayBuffer]"]=Ug["[object Boolean]"]=Ug["[object DataView]"]=Ug["[object Date]"]=Ug["[object Error]"]=Ug["[object Function]"]=Ug["[object Map]"]=Ug["[object Number]"]=Ug["[object Object]"]=Ug["[object RegExp]"]=Ug["[object Set]"]=Ug["[object String]"]=Ug["[object WeakMap]"]=!1;var ng=function ng(I){return wg(I)&&kg(I.length)&&!!Ug[Hg(I)];};var Kg=function Kg(I){return function(g){return I(g);};},og={exports:{}};!function(I,g){var C=a,Z=g&&!g.nodeType&&g,l=Z&&I&&!I.nodeType&&I,b=l&&l.exports===Z&&C.process,c=function(){try{var I=l&&l.require&&l.require("util").types;return I||b&&b.binding&&b.binding("util");}catch(I){}}();I.exports=c;}(og,og.exports);var jg=og.exports,Dg=ng,vg=Kg,tg=jg&&jg.isTypedArray,Qg=tg?vg(tg):Dg,Og=ug,Eg=Sg,Pg=Mg,fg=ag,eg=Bg,rg=Qg,qg=Object.prototype.hasOwnProperty;var _g=function _g(I,g){var C=Pg(I),Z=!C&&Eg(I),l=!C&&!Z&&fg(I),b=!C&&!Z&&!l&&rg(I),c=C||Z||l||b,G=c?Og(I.length,String):[],X=G.length;for(var A in I)!g&&!qg.call(I,A)||c&&("length"==A||l&&("offset"==A||"parent"==A)||b&&("buffer"==A||"byteLength"==A||"byteOffset"==A)||eg(A,X))||G.push(A);return G;},$g=Object.prototype;var IC=function IC(I){var g=I&&I.constructor;return I===("function"==typeof g&&g.prototype||$g);};var gC=function gC(I,g){return function(C){return I(g(C));};},CC=gC(Object.keys,Object),ZC=IC,lC=CC,bC=Object.prototype.hasOwnProperty;var cC=e,GC=Tg;var XC=function XC(I){return null!=I&&GC(I.length)&&!cC(I);},AC=_g,dC=function dC(I){if(!ZC(I))return lC(I);var g=[];for(var C in Object(I))bC.call(I,C)&&"constructor"!=C&&g.push(C);return g;},mC=XC;var WC=function WC(I){return mC(I)?AC(I):dC(I);},VC=Yg,yC=WC;var YC=function YC(I,g){return I&&VC(g,yC(g),I);};var uC=O,iC=IC,LC=function LC(I){var g=[];if(null!=I)for(var C in Object(I))g.push(C);return g;},NC=Object.prototype.hasOwnProperty;var hC=_g,RC=function RC(I){if(!uC(I))return LC(I);var g=iC(I),C=[];for(var Z in I)("constructor"!=Z||!g&&NC.call(I,Z))&&C.push(Z);return C;},xC=XC;var sC=function sC(I){return xC(I)?hC(I,!0):RC(I);},pC=Yg,SC=sC;var MC=function MC(I,g){return I&&pC(g,SC(g),I);},JC={exports:{}};!function(I,g){var C=T,Z=g&&!g.nodeType&&g,l=Z&&I&&!I.nodeType&&I,b=l&&l.exports===Z?C.Buffer:void 0,c=b?b.allocUnsafe:void 0;I.exports=function(I,g){if(g)return I.slice();var C=I.length,Z=c?c(C):new I.constructor(C);return I.copy(Z),Z;};}(JC,JC.exports);var FC=JC.exports;var aC=function aC(I,g){var C=-1,Z=I.length;for(g||(g=Array(Z));++C<Z;)g[C]=I[C];return g;};var zC=function zC(I,g){for(var C=-1,Z=null==I?0:I.length,l=0,b=[];++C<Z;){var c=I[C];g(c,C,I)&&(b[l++]=c);}return b;};var BC=function BC(){return[];},TC=zC,HC=BC,kC=Object.prototype.propertyIsEnumerable,wC=Object.getOwnPropertySymbols,UC=wC?function(I){return null==I?[]:(I=Object(I),TC(wC(I),function(g){return kC.call(I,g);}));}:HC,nC=Yg,KC=UC;var oC=function oC(I,g){return nC(I,KC(I),g);};var jC=function jC(I,g){for(var C=-1,Z=g.length,l=I.length;++C<Z;)I[l+C]=g[C];return I;},DC=gC(Object.getPrototypeOf,Object),vC=jC,tC=DC,QC=UC,OC=BC,EC=Object.getOwnPropertySymbols?function(I){for(var g=[];I;)vC(g,QC(I)),I=tC(I);return g;}:OC,PC=Yg,fC=EC;var eC=function eC(I,g){return PC(I,fC(I),g);},rC=jC,qC=Mg;var _C=function _C(I,g,C){var Z=g(I);return qC(I)?Z:rC(Z,C(I));},$C=_C,IZ=UC,gZ=WC;var CZ=function CZ(I){return $C(I,gZ,IZ);},ZZ=_C,lZ=EC,bZ=sC;var cZ=function cZ(I){return ZZ(I,bZ,lZ);},GZ=VI(T,"DataView"),XZ=yI,AZ=VI(T,"Promise"),dZ=VI(T,"Set"),mZ=VI(T,"WeakMap"),WZ=Q,VZ=II,yZ="[object Map]",YZ="[object Promise]",uZ="[object Set]",iZ="[object WeakMap]",LZ="[object DataView]",NZ=VZ(GZ),hZ=VZ(XZ),RZ=VZ(AZ),xZ=VZ(dZ),sZ=VZ(mZ),pZ=WZ;(GZ&&pZ(new GZ(new ArrayBuffer(1)))!=LZ||XZ&&pZ(new XZ())!=yZ||AZ&&pZ(AZ.resolve())!=YZ||dZ&&pZ(new dZ())!=uZ||mZ&&pZ(new mZ())!=iZ)&&(pZ=function pZ(I){var g=WZ(I),C="[object Object]"==g?I.constructor:void 0,Z=C?VZ(C):"";if(Z)switch(Z){case NZ:return LZ;case hZ:return yZ;case RZ:return YZ;case xZ:return uZ;case sZ:return iZ;}return g;});var SZ=pZ,MZ=Object.prototype.hasOwnProperty;var JZ=function JZ(I){var g=I.length,C=new I.constructor(g);return g&&"string"==typeof I[0]&&MZ.call(I,"index")&&(C.index=I.index,C.input=I.input),C;},FZ=T.Uint8Array;var aZ=function aZ(I){var g=new I.constructor(I.byteLength);return new FZ(g).set(new FZ(I)),g;},zZ=aZ;var BZ=function BZ(I,g){var C=g?zZ(I.buffer):I.buffer;return new I.constructor(C,I.byteOffset,I.byteLength);},TZ=/\w*$/;var HZ=function HZ(I){var g=new I.constructor(I.source,TZ.exec(I));return g.lastIndex=I.lastIndex,g;},kZ=H?H.prototype:void 0,wZ=kZ?kZ.valueOf:void 0;var UZ=aZ;var nZ=aZ,KZ=BZ,oZ=HZ,jZ=function jZ(I){return wZ?Object(wZ.call(I)):{};},DZ=function DZ(I,g){var C=g?UZ(I.buffer):I.buffer;return new I.constructor(C,I.byteOffset,I.length);};var vZ=function vZ(I,g,C){var Z=I.constructor;switch(g){case"[object ArrayBuffer]":return nZ(I);case"[object Boolean]":case"[object Date]":return new Z(+I);case"[object DataView]":return KZ(I,C);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return DZ(I,C);case"[object Map]":case"[object Set]":return new Z();case"[object Number]":case"[object String]":return new Z(I);case"[object RegExp]":return oZ(I);case"[object Symbol]":return jZ(I);}},tZ=O,QZ=Object.create,OZ=function(){function I(){}return function(g){if(!tZ(g))return{};if(QZ)return QZ(g);I.prototype=g;var C=new I();return I.prototype=void 0,C;};}(),EZ=DC,PZ=IC;var fZ=function fZ(I){return"function"!=typeof I.constructor||PZ(I)?{}:OZ(EZ(I));},eZ=SZ,rZ=ig;var qZ=function qZ(I){return rZ(I)&&"[object Map]"==eZ(I);},_Z=Kg,$Z=jg&&jg.isMap,Il=$Z?_Z($Z):qZ,gl=SZ,Cl=ig;var Zl=function Zl(I){return Cl(I)&&"[object Set]"==gl(I);},ll=Kg,bl=jg&&jg.isSet,cl=bl?ll(bl):Zl,Gl=Zg,Xl=lg,Al=Wg,dl=YC,ml=MC,Wl=FC,Vl=aC,yl=oC,Yl=eC,ul=CZ,il=cZ,Ll=SZ,Nl=JZ,hl=vZ,Rl=fZ,xl=Mg,sl=ag,pl=Il,Sl=O,Ml=cl,Jl=WC,Fl=sC,al="[object Arguments]",zl="[object Function]",Bl="[object Object]",Tl={};Tl[al]=Tl["[object Array]"]=Tl["[object ArrayBuffer]"]=Tl["[object DataView]"]=Tl["[object Boolean]"]=Tl["[object Date]"]=Tl["[object Float32Array]"]=Tl["[object Float64Array]"]=Tl["[object Int8Array]"]=Tl["[object Int16Array]"]=Tl["[object Int32Array]"]=Tl["[object Map]"]=Tl["[object Number]"]=Tl[Bl]=Tl["[object RegExp]"]=Tl["[object Set]"]=Tl["[object String]"]=Tl["[object Symbol]"]=Tl["[object Uint8Array]"]=Tl["[object Uint8ClampedArray]"]=Tl["[object Uint16Array]"]=Tl["[object Uint32Array]"]=!0,Tl["[object Error]"]=Tl[zl]=Tl["[object WeakMap]"]=!1;var Hl=function I(g,C,Z,l,b,c){var G,X=1&C,A=2&C,d=4&C;if(Z&&(G=b?Z(g,l,b,c):Z(g)),void 0!==G)return G;if(!Sl(g))return g;var m=xl(g);if(m){if(G=Nl(g),!X)return Vl(g,G);}else{var W=Ll(g),V=W==zl||"[object GeneratorFunction]"==W;if(sl(g))return Wl(g,X);if(W==Bl||W==al||V&&!b){if(G=A||V?{}:Rl(g),!X)return A?Yl(g,ml(G,g)):yl(g,dl(G,g));}else{if(!Tl[W])return b?g:{};G=hl(g,W,X);}}c||(c=new Gl());var y=c.get(g);if(y)return y;c.set(g,G),Ml(g)?g.forEach(function(l){G.add(I(l,C,Z,l,g,c));}):pl(g)&&g.forEach(function(l,b){G.set(b,I(l,C,Z,b,g,c));});var Y=m?void 0:(d?A?il:ul:A?Fl:Jl)(g);return Xl(Y||g,function(l,b){Y&&(l=g[b=l]),Al(G,b,I(l,C,Z,b,g,c));}),G;},kl=Q,wl=ig;var Ul=function Ul(I){return"symbol"==_typeof(I)||wl(I)&&"[object Symbol]"==kl(I);},nl=Mg,Kl=Ul,ol=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,jl=/^\w*$/;var Dl=function Dl(I,g){if(nl(I))return!1;var C=_typeof(I);return!("number"!=C&&"symbol"!=C&&"boolean"!=C&&null!=I&&!Kl(I))||jl.test(I)||!ol.test(I)||null!=g&&I in Object(g);},vl=EI;function tl(I,g){if("function"!=typeof I||null!=g&&"function"!=typeof g)throw new TypeError("Expected a function");var C=function C(){var Z=arguments,l=g?g.apply(this,Z):Z[0],b=C.cache;if(b.has(l))return b.get(l);var c=I.apply(this,Z);return C.cache=b.set(l,c)||b,c;};return C.cache=new(tl.Cache||vl)(),C;}tl.Cache=vl;var Ql=tl;var Ol=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,El=/\\(\\)?/g,Pl=function(I){var g=Ql(I,function(I){return 500===C.size&&C.clear(),I;}),C=g.cache;return g;}(function(I){var g=[];return 46===I.charCodeAt(0)&&g.push(""),I.replace(Ol,function(I,C,Z,l){g.push(Z?l.replace(El,"$1"):C||I);}),g;}),fl=l,el=Mg,rl=Ul,ql=H?H.prototype:void 0,_l=ql?ql.toString:void 0;var $l=function I(g){if("string"==typeof g)return g;if(el(g))return fl(g,I)+"";if(rl(g))return _l?_l.call(g):"";var C=g+"";return"0"==C&&1/g==-Infinity?"-0":C;},Ib=$l;var gb=Mg,Cb=Dl,Zb=Pl,lb=function lb(I){return null==I?"":Ib(I);};var bb=function bb(I,g){return gb(I)?I:Cb(I,g)?[I]:Zb(lb(I));};var cb=Ul;var Gb=function Gb(I){if("string"==typeof I||cb(I))return I;var g=I+"";return"0"==g&&1/I==-Infinity?"-0":g;},Xb=bb,Ab=Gb;var db=function db(I,g){for(var C=0,Z=(g=Xb(g,I)).length;null!=I&&C<Z;)I=I[Ab(g[C++])];return C&&C==Z?I:void 0;};var mb=function mb(I,g,C){var Z=-1,l=I.length;g<0&&(g=-g>l?0:l+g),(C=C>l?l:C)<0&&(C+=l),l=g>C?0:C-g>>>0,g>>>=0;for(var b=Array(l);++Z<l;)b[Z]=I[Z+g];return b;},Wb=db,Vb=mb;var yb=bb,Yb=function Yb(I){var g=null==I?0:I.length;return g?I[g-1]:void 0;},ub=function ub(I,g){return g.length<2?I:Wb(I,Vb(g,0,-1));},ib=Gb;var Lb=function Lb(I,g){return g=yb(g,I),null==(I=ub(I,g))||delete I[ib(Yb(g))];},Nb=Q,hb=DC,Rb=ig,xb=Function.prototype,sb=Object.prototype,pb=xb.toString,Sb=sb.hasOwnProperty,Mb=pb.call(Object);var Jb=function Jb(I){if(!Rb(I)||"[object Object]"!=Nb(I))return!1;var g=hb(I);if(null===g)return!0;var C=Sb.call(g,"constructor")&&g.constructor;return"function"==typeof C&&C instanceof C&&pb.call(C)==Mb;};var Fb=function Fb(I){return Jb(I)?void 0:I;},ab=Sg,zb=Mg,Bb=H?H.isConcatSpreadable:void 0;var Tb=jC,Hb=function Hb(I){return zb(I)||ab(I)||!!(Bb&&I&&I[Bb]);};var kb=function I(g,C,Z,l,b){var c=-1,G=g.length;for(Z||(Z=Hb),b||(b=[]);++c<G;){var X=g[c];C>0&&Z(X)?C>1?I(X,C-1,Z,l,b):Tb(b,X):l||(b[b.length]=X);}return b;},wb=kb;var Ub=function Ub(I){return(null==I?0:I.length)?wb(I,1):[];};var nb=function nb(I,g,C){switch(C.length){case 0:return I.call(g);case 1:return I.call(g,C[0]);case 2:return I.call(g,C[0],C[1]);case 3:return I.call(g,C[0],C[1],C[2]);}return I.apply(g,C);},Kb=Math.max;var ob=function ob(I,g,C){return g=Kb(void 0===g?I.length-1:g,0),function(){for(var Z=arguments,l=-1,b=Kb(Z.length-g,0),c=Array(b);++l<b;)c[l]=Z[g+l];l=-1;for(var G=Array(g+1);++l<g;)G[l]=Z[l];return G[g]=C(c),nb(I,this,G);};};var jb=function jb(I){return function(){return I;};},Db=cg,vb=Db?function(I,g){return Db(I,"toString",{configurable:!0,enumerable:!1,value:jb(g),writable:!0});}:function(I){return I;},tb=Date.now;var Qb=function(I){var g=0,C=0;return function(){var Z=tb(),l=16-(Z-C);if(C=Z,l>0){if(++g>=800)return arguments[0];}else g=0;return I.apply(void 0,arguments);};}(vb),Ob=Ub,Eb=ob,Pb=Qb;var fb=l,eb=Hl,rb=Lb,qb=bb,_b=Yg,$b=Fb,Ic=cZ,gc=Z(function(I){return Pb(Eb(I,void 0,Ob),I+"");}(function(I,g){var C={};if(null==I)return C;var Z=!1;g=fb(g,function(g){return g=qb(g,I),Z||(Z=g.length>1),g;}),_b(I,Ic(I),C),Z&&(C=eb(C,7,$b));for(var l=g.length;l--;)rb(C,g[l]);return C;}));var Cc=/*#__PURE__*/function(){function Cc(I){var g=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var C=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};_classCallCheck(this,Cc);_defineProperty(this,"container",null);_defineProperty(this,"wrapper",null);_defineProperty(this,"wrapperMain",null);_defineProperty(this,"options",{});_defineProperty(this,"requestOptions",{});_defineProperty(this,"pdfDocument",null);this.container=I,this.options=_objectSpread({staticFileUrl:"https://unpkg.com/pdfjs-dist@3.1.81/"},g),this.requestOptions=C,this.createWrapper();}_createClass(Cc,[{key:"createWrapper",value:function createWrapper(){this.wrapper=document.createElement("div"),this.wrapper.className="vue-office-pdf",this.wrapper.setAttribute("style","text-align: center;overflow-y: auto;"),this.container.appendChild(this.wrapper);}},{key:"createWrapperMain",value:function createWrapperMain(){this.wrapperMain=document.createElement("div"),this.wrapperMain.className="vue-office-pdf-wrapper",this.wrapperMain.setAttribute("style","background: gray; padding: 30px 0;position: relative;"),this.wrapper.appendChild(this.wrapperMain);}},{key:"createCanvas",value:function createCanvas(I){var g=this.wrapperMain.querySelectorAll("canvas");if(g[I-1])return[g[I-1],g[I-1].getContext("2d")];var C=document.createElement("canvas");return C.setAttribute("style","width:100%"),this.wrapperMain.appendChild(C),[C,C.getContext("2d")];}},{key:"installPdfScript",value:function installPdfScript(){return(I="data:text/javascript;base64,",new Promise(function(g,C){var Z=document.createElement("script");Z.src=I,Z.onload=function(){g();},Z.onerror=function(){C();},document.body.append(Z);})).then(function(){window.pdfjsLib.GlobalWorkerOptions.workerSrc="data:text/javascript;base64,";});var I;}},{key:"checkPdfLib",value:function checkPdfLib(){return window.pdfjsLib?Promise.resolve():this.installPdfScript();}},{key:"getDocument",value:function getDocument(g){return window.pdfjsLib.getDocument(_objectSpread({url:I(g),cMapUrl:"".concat(this.options.staticFileUrl.endsWith("/")?this.options.staticFileUrl:this.options.staticFileUrl+"/","cmaps/"),cMapPacked:!0,enableXfa:!0},gc(this.options,["width","staticFileUrl"]))).promise;}},{key:"renderSinglePage",value:function renderSinglePage(I){var _this=this;return this.pdfDocument.getPage(I).then(function(g){var C=g.getViewport({scale:2}),Z=window.devicePixelRatio||1;var _this$createCanvas=_this.createCanvas(I),_this$createCanvas2=_slicedToArray(_this$createCanvas,2),l=_this$createCanvas2[0],b=_this$createCanvas2[1];l.width=Math.floor(C.width*Z),l.height=Math.floor(C.height*Z);var c=Math.floor(C.width),G=Math.floor(C.height);if(_this.options.width){var _I2=_this.options.width/c;c=Math.floor(_this.options.width),G=Math.floor(G*_I2);}var X=_this.wrapperMain.getBoundingClientRect().width-20;if(c>X){var _I3=X/c;c=Math.floor(X),G=Math.floor(G*_I3);}l.style.width=c+"px",l.style.height=G+"px";var A=1!==Z?[Z,0,0,Z,0,0]:null;return g.render({canvasContext:b,transform:A,viewport:C}).promise.then(function(){if(_this.pdfDocument.numPages>I)return _this.renderSinglePage(I+1);});});}},{key:"renderPage",value:function renderPage(){if(this.wrapperMain){var _I4=this.wrapperMain.querySelectorAll("canvas");if(_I4.length>this.pdfDocument.numPages)for(var _g3=_I4.length-1;_g3>=this.pdfDocument.numPages;_g3--)this.wrapperMain.removeChild(_I4[_g3]);}else this.createWrapperMain();return this.renderSinglePage(1);}},{key:"clearAllCanvas",value:function clearAllCanvas(){this.wrapperMain&&(this.wrapper.removeChild(this.wrapperMain),this.wrapperMain=null);}},{key:"setOptions",value:function setOptions(I){this.options=I;}},{key:"setRequestOptions",value:function setRequestOptions(I){this.requestOptions=I;}},{key:"preview",value:function preview(I){var _this2=this;return new Promise(function(g,C){if(!I)return _this2.clearAllCanvas(),void C(new Error("预览地址不能为空"));_this2.checkPdfLib().then(function(Z){_this2.getDocument(I).then(function(I){_this2.pdfDocument=I,_this2.renderPage().then(function(I){g();})["catch"](function(I){_this2.clearAllCanvas(),C(I);});})["catch"](function(I){_this2.clearAllCanvas(),C(I);});})["catch"](function(I){_this2.clearAllCanvas(),C(I);});});}},{key:"rerender",value:function rerender(){var _this3=this;return this.renderPage().then(function(I){return Promise.resolve();})["catch"](function(I){return _this3.clearAllCanvas(),Promise.reject(I);});}},{key:"save",value:function save(I){this.pdfDocument&&this.pdfDocument._transport&&this.pdfDocument._transport.getData().then(function(C){g(I||"js-preview-pdf-".concat(new Date().getTime(),".pdf"),C.buffer);});}},{key:"destroy",value:function destroy(){this.container.removeChild(this.wrapper),this.container=null,this.wrapper=null,this.wrapperMain=null,this.options={},this.requestOptions={},this.pdfDocument=null;}}]);return Cc;}();var Zc={init:function init(I,g,C){return new Cc(I,g,C);}};export{Zc as default};
